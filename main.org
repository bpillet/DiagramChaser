#+TITLE: DIAGRAM CHASER
#+AUTHOR: PILLET BASILE
#+STARTUP: indent
#+FILETAGS: DiagramChaser

* Presentation
** Visual
A grid where each point can be set in one of the following states
- '0' null and non-exact a priori
- '-' non-null and exact in the row
- '|' non-null and exact in the column
- '+' non-null and exact in both direction
- '@' non-null and non-exact a priori

Each segment between adjacent points represent a map and can be set to
- ' ' non-existant
- '->' directed map
- 'c->' injective map
- '->>' surjective map
- '~' isomorphism

Remark: Everything is supposed commutative

*** Exemple

#+BEGIN_SRC plain

 0 -> 0 -> - -> + -> @ -> 0
      |         | 
      v         v     
 0 -> + -> - -> + -> 0
      |    |    |
      v    v    v
 0 -> + -> + -> + -> 0
      |    |    |
      v    v    v
      0    0    0

#+END_SRC

** Features
- Construct maps between points when they exist
- Construct kernell and cokernell, shows vanishing
- Show isomorphisms
- Implement actual diagram chasing

* Implementation
** Interface
- HTML + CSS + script ?
- Text-file + Ocaml (ou Lisp ou prolog) ?

** Algorithme
Fonctionne par étape. 
Une étape
1. Cherche les
  : 0 -> - -> 
pour en faire des
  : 0 -> - c->
Et symmétriquement pour la surjectivité, puis les isos.
2. Exactise dans la mesure du possible
  : -> @ -> 0 -> 0 ...
se transforme en
  : -> - -> - -> 0
Et les simple flèches
  : @ -> @
se trouvent munies de noyau et conoyau
  : 0 -> - -> - -> - -> - -> 0
Refait la même chose verticalement
3. Fait apparaître les flèches qui existent (dur)
#+BEGIN_SRC plain

 0 -> - -> - -> - -> 0
      |    |    :  
      v    v    ;      
 0 -> - -> - -> - -> 0

#+END_SRC


** TODO Structure de données
Peut être vaut-il mieux encoder ces donnée autrement dans un format mathématiquement plus propice au calcul.
* Autre
** TODO Logo
- Carquois avec des flèches !
- Chapeau à la crocodile Dundee sur un diagramme
- Écriture de "DiagramChaser" en diagramme

